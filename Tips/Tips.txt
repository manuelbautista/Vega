OJO SIEMPRE DEJAR EL dotnet watch run  YA QUE PUEDES VER LOS ERRORES MIENTRAS CODEAS Y
REPUERDA SIEMPRE GUARDAR LOS CAMBIOS CONTROL + S

Correr en development
set ASPNETCORE_ENVIRONMENT=DEVELOPMENT
dotnet run
------------------------------------------
para no hacer dotnet run a cada rato cuando se modifique el
server side:
Agregar al csproj el dotnet watch
<ItemGroup>
    <DotNetCliToolReference Include="Microsoft.DotNet.Watcher.Tools" Version="1.0.0" />
 </ItemGroup>
luego hacer dotnet restore para descargar el paquete
luego dotnet watch
luego dotnet watch run para correr el proyecto
-----------------------------------------------------
Agregar entity framework al core desde vs code, agregar paquete al proyecto desde vs code
1-) dotnet add package Microsoft.EntityFrameworkCore.SqlServer
2-) dotnet add package Microsoft.EntityFrameworkCore.Design
3-)agregar al csproj
  <ItemGroup>
    <DotNetCliToolReference Include="Microsoft.EntityFrameworkCore.Tools.Dotnet" Version="2.0.0" />
  </ItemGroup>
------------------------------------------------------
dotnet restore == para bajar proyectos que estan en el csproj, cuando agregar un itemgroup
------------------------------------------------------------
Crear un dbcontext
1-)    public class VegaDbContext: DbContext
    {
  
      public  VegaDbContext(DbContextOptions<VegaDbContext> options) : base(options) {

                
        }  
    }
 public DbSet<Make> Makes { get; set; }


2-) Registrar el servicio con dependecy injection
using Microsoft.EntityFrameworkCore;
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddDbContext<VegaDbContext>(options => options.UseSqlServer(""))
----------------------------------------------------------------
Crear Database
1-) dotnet ef migrations add InitialModel
2-) dotnet ef database update

------------------------------------------------------
Borrar migrations y actualizarlas (en caso de que hagas cambios antes de llevarlos a la DB)
dotnet ef migrations remove
dotnet ef migrations add InitialModel
dotnet ef database update  --> aplicar a la DB si todo esta bien.
------------------------------------------------------
actualizar migrations
dotnet ef database 0
dotnet ef migrations remove

luego de ser los cambios en el modelo

dotnet ef migrations add ApplyConstraints
dotnet ef database update

Seeding database
1-)Crear nuevo migration
2-)Crear los querys en 20170828101024_SeedDatabase model
3-)dotnet ef database update
------------------------------
dotnet ef database update ApplyConstraints (Model)  --> si quiero ir al model applyconstraints

dotnet ef database update  aplica el ultimo model

-------------------------------------
Si la carpeta del node module no esta --> npm install

si en la carpeta wwwroot no esta el folder dist, correr el webpack
--> 1-) webpack --config webpack.config.vendor.js
    2-)webpack
    3-)dotnet watch run

------------------------------------------------
Instalar AutoMapper
dotnet add package AutoMapper
dotnet add package AutoMapper.Extensions.Microsoft.DependencyInjection --version 1.
2.0
dotnet restore

----------------------------Ahora setear el front end-----------------------------------
1-)npm install @angular/cli@latest -g   para instalar ultima version cli
2-)ng new hello-world
3-)copiar el angular-cli.json del folder helloworld y ponerlo en el root del proyecto
4-)cambiar el root: y poner "ClientApp"
5-)npm install @angular/cli@latest --save-dev
6-)remover el folder del proyecto angular hello world
7-)entrar al folder \ClientApp\app\components
8-)ng g component vehicle-form --module ../app.module.shared.ts    -> se debe especificar el module si no dara error ya que el proyecto no tiene el module.ts normal
9-)remover el test file, spec

----------------------------------------
import 'rxjs/Rx';  para obtener el map del http.get().map

renombar objecto-- ponerte arriba y presionar f2

(div.form-group>label+input[type='text'].form-control)*3     --> enmet operation


[Table("Vehicles")]  ---> para poner nombre custom a la tabla en la clase donde vas a crear la tabla con Code First

----------------------------------------------------------------
[Route("/api/vehicles")]
    --> para no tener que poner en el http post de cada metodo
public class VehiclesController: Controller
    {
        
[HttpPost]
        
public IActionResult CreateVehicle(Vehicle vehicle){
     -- cuando se va a grabar se usa iaction       
return Ok(vehicle);
        
}
    
}

Postman Chrome Extension -- Api Build

-----------Instalar Toast--------------------------
1-)npm install ng2-toasty@4.0.3 --save
2-)En el webpack.config.vendor.js:
    'ng2-toasty',
    'ng2-toasty/bundles/style-bootstrap.css',
3-)en el terminal:
webpack --config webpack.config.vendor.js
webpack
si te da webpack unreconize:
npm install -g webpack

4-)en el app.module.shared.ts
import { ToastyModule } from 'ng2-toasty';
en el imports[
       ToastyModule.forRoot(),]

private toastyService: ToastyService

---------------------------Error logins------------------
1-)sentry.io
2-)create new project -> Angularjs
3-)npm install raven-js --save
4-)agregar 'raven-js' en el webpack.config.vendor.js
5-)webpack --config webpack.config.vendor.js
6-)webpack
7-)import * as Raven from 'raven-js';  en el app.module.shared
8-)Raven.config('https://ad82ca535ed449f2a111e15ac9dbd682@sentry.io/215493')
.install();  --> arriba de @NgModule({
9-)handlerError(error: any): void { 
	Raven.captureException(error.originalError || error);  en el error-handler.ts


----------------------Instalar Underscore--------------------------------
npm install underscore

----------------INSTALL FONT-AWESOME-----------------
1-)npm install font-awesome --save
2-)webpack.config.vendor.js
3-)agregar 'font-awesome/css/font-awesome.css', en treeShakableModules
4-)webpack --config webpack.config.vendor.js

--------------------Agregar pho al migration---------------------
agregarla en el dbContext
dotnet ef migrations add AddPhoto
dotnet ef database update

---------------------Crear un service rapido------------------
a-service ---> borro y de nuevo a-service

----------------------Authentication USING AUTH0-----------------------------
CREAR UNA CUENTA Y UN API EN AUTH0.COM
COPIAR EL CODIGO Y PEGARLO EN STARTUP.CS
dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer
dotnet restore
[Authorize] en el controller

para probar en api en postman key: Authorization value: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6IlFrUkdPRFZDTURjeFJFVTVRamxGT1RSRk1VVkVSRGd5TkRGRk1VVTROemMyTmpaRFFUTkROZyJ9.eyJpc3MiOiJodHRwczovL3ZlZ2Fwcm95ZWN0by5hdXRoMC5jb20vIiwic3ViIjoiUjVodTc5NzdaMzFJcmRYRW5IYnd5Wk5ISmJpazM2NDNAY2xpZW50cyIsImF1ZCI6Imh0dHBzOi8vYXBpLnZlZ2EuY29tIiwiaWF0IjoxNTA2NzgyNDE2LCJleHAiOjE1MDY4Njg4MTYsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyJ9.TY-roOcXzryepshiX7NvUnU5jKAY-R5KCZBMwPypr3uRy8YTSi7qSKmxn3RscrJcKSaH0EaBsxJ1S7qF_RbG3qfuJVUB7A5j0pq0m5E0EqmlQvDmYCthTOgB9i3L8QVIgr60PAyi-o9erqn00BmMHRZ7cegZiRhn-BS69VsYvm6dKLxLqTxnMfcka5qpzXRtIOaDuUm2sCJFm5jGmf_8Ryr7hUncLoh3t33vlX1Ve9e09ivAnoPtRASQud6ofH_TbWCNvjWBSwLGnFICu5m2Ue66LOeBdxw9KsVFyxqW8AsZuMonwUfrHEz-0fyycJtFXOQd3hFINwdeH6qtttHZUg

------------------------------------Client Side:
Clients section  --> Create Client
Name Client
Single Page App, Angular 2+, Create
Settings tab, scroll down, click show advance settings, Oauth, Json webtoken sigature = RS256
npm install auth0-lock angular2-jwt --save
npm install --save auth0-js
npm install --save @types/auth0-js

webpack.config.vendor --> add 'angular2-jwt','auth0-lock',
webpack --config webpack.config.vendor.js
agregar callbackurl, logouturl, allowed origins: 
http://localhost:5000

ir a quickdocumentacion del client, copiar el codigo y crear un auth.service.ts y pegar 
el codigo, ej:
// src/app/auth/auth.service.ts

@Injectable()
export class AuthService {

  auth0 = new auth0.WebAuth({
    clientID: 'hdrkrFPykPVZ25POZTVcUMZ74GJ0w37d',
    domain: 'vegaproyecto.auth0.com',
    responseType: 'token id_token',
    audience: 'https://vegaproyecto.auth0.com/userinfo',
    redirectUri: 'http://localhost:5000/callback',      
    scope: 'openid'
  });

  constructor(public router: Router) {}

    // ...
    public handleAuthentication(): void {
      this.auth0.parseHash((err, authResult) => {
        if (authResult && authResult.accessToken && authResult.idToken) {
          window.location.hash = '';
          this.setSession(authResult);
          this.router.navigate(['/home']);
        } else if (err) {
          this.router.navigate(['/home']);
          console.log(err);
        }
      });
    }
    private setSession(authResult: any): void {
      // Set the time that the access token will expire at
      const expiresAt = JSON.stringify((authResult.expiresIn * 1000) + new Date().getTime());
      localStorage.setItem('access_token', authResult.accessToken);
      localStorage.setItem('id_token', authResult.idToken);
      localStorage.setItem('expires_at', expiresAt);
    }
  
    public logout(): void {
      // Remove tokens and expiry time from localStorage
      localStorage.removeItem('access_token');
      localStorage.removeItem('id_token');
      localStorage.removeItem('expires_at');
      // Go back to the home route
      this.router.navigate(['/']);
    }
  
    public isAuthenticated(): boolean {
      // Check whether the current time is past the
      // access token's expiry time
      var expireAtString = localStorage.getItem('expires_at');
      if(expireAtString)
        var expiresAt = JSON.parse(expireAtString);
        
      return new Date().getTime() < expiresAt;
    }

  public login(): void {

    this.auth0.authorize({
      clientID: 'hdrkrFPykPVZ25POZTVcUMZ74GJ0w37d',
      domain: 'vegaproyecto.auth0.com',
      responseType: 'token id_token',
      audience: 'https://vegaproyecto.auth0.com/userinfo',
      redirectUri: 'http://localhost:5000/callback',      
      scope: 'openid'
    });
  }

export class AppComponent {

  constructor(public auth: AuthService) {
    auth.handleAuthentication();
  }

}


------------------------------Cuando de error hacer esto--------------
NodeInvocationException: Prerendering failed because of error: TypeError: require is not a function
ir a index.cshtml y borrar el asp-prerender-module o poner una x alante de xasp
